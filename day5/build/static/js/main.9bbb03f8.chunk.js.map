{"version":3,"sources":["VideoItem.js","VideoList.js","VideoSearch.js","App.js","serviceWorker.js","index.js"],"names":["VideoItem","_ref","video","imageUrl","snippet","thumbnails","default","url","react_default","a","createElement","className","src","title","VideoList","props","videoItems","videos","map","src_VideoItem","onVideoSelect","key","etag","VideoSearch","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onHandleChange","e","setState","term","target","value","ocHandleSubmit","preventDefault","onCreate","state","onSubmit","type","onChange","Component","API_KEY","App","videoSearch","YTSearch","data","selectedVideo","selectVideo","href","src_VideoSearch","src_VideoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bbb03f8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst VideoItem = ({video}) => {\r\n  const imageUrl = video.snippet.thumbnails.default.url;\r\n\r\n\r\n  return (\r\n    <li className=\"card mb-4 shadow\">\r\n      <img className=\"card-img-top\" src={imageUrl} />\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{video.snippet.title}</h5>\r\n      </div>\r\n    </li>\r\n  )\r\n};\r\n\r\nexport default VideoItem;\r\n","import React from 'react';\r\nimport VideoItem from './VideoItem'\r\nimport './Video.css'\r\n\r\nconst VideoList = (props) => {\r\n\r\n  const videoItems = props.videos.map(video => {\r\n    return (\r\n      <VideoItem\r\n        onVideoSelect = {props.onVideoSelect}\r\n        key = {video.etag}\r\n        video = {video}\r\n      />\r\n    )\r\n  });\r\n\r\n  return (\r\n    <ul className=\"card-columns\">\r\n      {videoItems}\r\n    </ul>\r\n  )\r\n\r\n};\r\n\r\n\r\nexport default VideoList;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass VideoSearch extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { \r\n            term: '' \r\n        }\r\n    }\r\n    \r\n    onHandleChange = (e) => {\r\n        this.setState({\r\n            term: e.target.value\r\n        })\r\n    }\r\n\r\n    ocHandleSubmit = (e) => {\r\n        e.preventDefault()\r\n        this.props.onCreate(this.state);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.ocHandleSubmit}>\r\n                <div className=\"input-group mb-3\">\r\n                    <input type=\"text\" className=\"form-control\" value={this.state.term} onChange={this.onHandleChange}/>\r\n                    <div className=\"input-group-append\">\r\n                        <button className=\"btn btn-danger\" type=\"submit\">Search</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default VideoSearch;","import React, { Component } from 'react';\nimport YTSearch from 'youtube-api-search';\nimport VideoList from './VideoList';\nimport './App.css'\nimport VideoSearch from './VideoSearch';\nconst API_KEY = \"AIzaSyC_SMfYoEP1JbCZFCHr8dgEqirsu1df_MM\";\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      data: [],\n      selectVideo: null,\n      term: 'yes'\n    }\n    \n  }\n  \n  videoSearch = (term) => {\n    this.setState({\n      term: term\n    })\n    YTSearch({ key: API_KEY, term: term }, data => {\n      this.setState({ \n        data: data,\n        selectedVideo : data[0]\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\" pt-3\">\n          <div className=\"navbar\">\n            <div className=\"container justify-content-between\">\n              <a href=\"#\" className=\"navbar-brand text-white\"><h2>Youtube List</h2></a>\n              <VideoSearch onCreate={this.videoSearch}/>\n            </div>\n          </div>\n        </header>\n        <main className=\"container pt-3\">\n          <VideoList videos={this.state.data}/>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}